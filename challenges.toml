[nothing]
challenge = ""
result = "None"

[one]
challenge = "1"
result = "1"

[twelve]
challenge = "12"
result = "c"

[execzero]
challenge = "0 ."
result = "0"

[add] 
challenge = "2 3 +"
result = "5"

[atom] 
challenge = "@"
result = "@"

[execnull] 
challenge = "@ ."
result = "None"

[execfive]
challenge = "5 ."
result = "5"

[fivestring]
challenge = ":five 5"
result = "five 5"

[namefive]
challenge = ":five 5 five"
result = "five 5 5"

[several]
challenge = """2 2 3  4 5
6
7
8
8 0 10 9999"""
result = "2 2 3 4 5 6 7 8 8 0 a 270f"

[declarevar]
challenge = """1 2 3 :hello 4 5"""
result = "1 2 3 hello 4 5"

[pull1]
challenge = "1 2 1 ,"
result = "1"

[pullescape1]
challenge = "1 2 1 .,"
result = "1 2 1 ," 

[multidot]
challenge = """
2 4 .+ ...
2 4 .+ ... .
2 4 .+ ... . .
"""
result = "2 4 + .1 2 4 + . 6"

[pull2]
challenge = "1 2 1 ,."
result = "1 2 1 , ."

[pulltwo]
challenge = "1 2 2 ,"
result = "None"

[pull4]
challenge = "1 1 ,"
result = "None"

[pull3]
challenge = """1 "5 ; " parse """
result = "1 1 1 1 1"

[begintoken]
challenge = """ "1" parse """
result = "1"

[doubledot1]
challenge = """1 2 1 , .."""
result = "1 ."

[doubledot2]
challenge = """1 2 1 , ."""
result = "1"

# [exclaim]
# challenge = """
# 1 3 0 <~

# """
# result = """
# ┗ 1 program:
#   ┗ 📁  e
#     ┣ 📁 
#       ┣ 3 x2
#       ┗ 1 e
#     ┣ 3 x2
#     ┗ 1 e
# """

[emptyarray]
challenge = """1 3 @ [ ]"""
result = "1 3 @"

[array1]
challenge = """1 3 @ [ 4 ]"""
result = """
@ 4
1 3
"""

[doublearray]
challenge = """1 3 @ [ 6 @ [ 4 ] ]"""
result = """
@
├@ 4
╰6
1 3
"""

[innerfunc1]
challenge = """1 3 @ [ 1 2 3 1 , ]"""
result = """
@ 1 2
1 3
"""

[innerfunc3]
challenge = "@ [ \"Hello Forj!\" print. @ [ 2 3 ] ]"
result = """
@
├@ 2 3
╰Hello Forj! print ."""

[innerfunc2]
challenge = """1 3 @ [ 6 @ [ 1 2 3 1 , ] ]"""
result = """
@
├@ 1 2
╰6
1 3
"""

[doublebracket]
challenge = """
:[[ @ [ [. [. :" @ [ "[[" ] 2 ,. ]
:]] @ [ ]. ]. :" @ [ "]]" ] 2 ,. ]

:i @ [ @ [ 0 ] ]
:i++ @ [ .i [. [. 1 +. ]. ]. ]
i++ 1 ,
i++ 1 ,
i++ 1 ,
i++ 1 ,
i++ 1 ,
"""
result = """
@
├[ . [ . 1 + . ] . ] .
╰@
 ╰@ 5
i++
@
╰@ 5
i
]]
]]
[[
[[ 
"""

[funcarray1]
challenge = """1 3 @ [ 6 ] ."""
result = "1 3 6"

[funcarray2]
challenge = """1 3 @ [ 1 2 3 4 5 6 7 8 9 ] ."""
result = "1 3 1 2 3 4 5 6 7 8 9"

[clone]
challenge = """1 3 @ <~ . 2 +"""
result = "1 3 1 5"

[clonearr]
challenge = """1 2 3 4 5 @ <~ ."""
result = """
1 2 3 4 5 1 2 3 4 5
"""

[consume]
challenge = """1 3 @ [ 1 2 <- ]"""
result = """
@ 1 2 3
1 3
"""

[throw]
challenge = """1 2 3 @ [ 1 2 ] ->"""
result = """
2
@ 1 2
1 2 3
"""

[throw2]
challenge = """
3 :t @ [ 1 2 <-. ] 
4 5 6 @ [ t ]
"""
result = """
@ 1 2 6
4 5 6
@ 1 2 <- .
3 t
"""

[consume2]
challenge = """1 2 3 @ [ 4 <- @ [ <- ] 5 6 ]"""
result = """
@
├5 6
├@ 3
╰4 3
1 2 3
"""

[descend1]
challenge = """1 3 :t @ <~ <~ 1 @ [ 4 ] 2 3 .t [ 5 + ] """
result = """
@ 1 8
2 3
@ 4
1
@ 1 3
1 3 t
"""

[descend2]
challenge = """1 3 @ <~ @ [ 4 ]"""
result = """
@ 4
@ 1 3
1 3
"""

[descend2_2]
challenge = """1 3 @ <~ [ 4 ]"""
result = """
@ 1 3 4
1 3
"""

[descend2_3]
challenge = """
1 3 @ [ @ [ 1 2 ] ]
@ <~ ~> [ [ + ] ]"""
result = """
@
╰@ 3
@
╰@ 3
1 3
"""

[descend_throw]
challenge = """
1 3 @ <~ ->"""
result = """
3
@ 1 3
1 3
"""

[descend_throw_pull]
challenge = """
1 :b 3 :c 4 :a @ <~ <~ -> .a <~ <~ ::b ."""
result = """
4 3
@ 1 b 3 c 4
1 b 3 c 4 a
"""

[descend3]
challenge = """1 3 @ <~ @ [ @ [ 2 ] ]"""
result = """
@
╰@ 2
@ 1 3
1 3
"""

[descend4]
challenge = """
1 3 @ <~ @ [ <- @ [ 2 <- ] ]
1 4 @ <~ @ [ @ [ 2 ] ]
"""
result = """
@
╰@ 2
@
├1 4
├@
 ├@
  ├@ 1 3
  ╰2
 ╰@ 1 3
├@ 1 3
╰1 3
1 4
@
├@
 ├@ 1 3
 ╰2
╰@ 1 3
@ 1 3
1 3
"""

[string1]
challenge = ' :hello '
result = "hello"

[multilinestring]
challenge = """
\"hi
hello
123
\"
"""
result = """
hi
hello
123
"""

[simplestring]
challenge = ' 1 @ [ 3 ] [ "hi" ] [ 7 ] 5'
result = """
5
@ 3 hi 7
1
"""

[string2]
challenge = ' 1 @ [ 1 2 3 ] [ "hi" ] [ 5 6 7 ] 15'
result = """
f
@ 1 2 3 hi 5 6 7
1
"""

[string8]
challenge = """ 4 @ [ 5 6 ] "essay about
\\"stuff\\" and \\"things\\"" 2 3"""
result = """
essay about
"stuff" and "things" 2 3
@ 5 6
4
"""

[string3]
challenge = ' "hi" :hi '
result = "hi hi"

[string4]
challenge = ' "hi" '
result = "hi"

[string7]
challenge = ' "hi how are you" '
result = "hi how are you"

[string5]
challenge = ' "\"" '
result = '"'

[string6]
challenge = ':" '
result = '"'

[variable1]
challenge = ' 2 :hi 3 hi'
result = "2 hi 3 3"

[variable2]
challenge = ' 2 :hi 3 @ [ hi ]'
result = """
@ 3
2 hi 3
"""

[printer]
challenge = ' 1 2 8 @ [ 1 2 3 :" @ [ "HI" ] 6 7 8 ] 4 3'
result = """
4 3
HI
1 2 8
"""

[headrecursive]
challenge = """
:n @ [ .. 3 4 +. ]
@ .n 10 ; .
"""
result = """
7 7 7 7 7 7 7 7 7 7
@ . 3 4 + .
n """

[printing]
challenge = """
:p @ [ .. "hi" print. ]
@ .p 10 ; .
"""
result = """
hihihihihihihihihihi
@ . hi print .
p
"""

[descend5]
challenge = """1 3 @ <~ [ @ [ 2 <- ] <- ] """
result = """
@
├3
├@ 2 3
╰1 3
1 3
"""

[descend6]
challenge = """1 @ [ 1 ] @ <~ [ [ 5 + ] ] """
result = """
@
├@ 6
╰1
@ 6
1
"""

[interior1]
challenge = """1 2 3 @ [ 4 :b @ [ :c 5 ] ] ::b ::c ."""
result = """
1 2 3 5
"""

[interior2]
challenge = """1 2 3 @ [ 4 :b @ [ 5 :c @ [ :d 6 ] ] ] ::b ::c ::d ."""
result = """
1 2 3 6
"""

[interiorcolon1]
challenge = """1 2 3 @ [ :a 9 ] """
result = """
@ a 9
1 2 3
"""

[interiorcolon2]
challenge = """1 2 3 @ [ :a 9 ] ::a ."""
result = """
1 2 3 9
"""

[interiorcolon4]
challenge = """1 2 3 ::: @ [ :a 9 ] a"""
result = """
9
@ a 9
1 2 3 ::
"""

[interiorcolon3]
challenge = """1 2 3 ::: @ [ :a 9 ] :a . """
result = """
9
@ a 9
1 2 3 ::
"""

[scanner]
challenge = """0 :hello 2 :hello : ."""
result = """
0 hello 2 2
"""

[length]
challenge = """2 2 2 2 length . @ [ 1 2 3 ] [ length . <- ]"""
result = """
@ 1 2 3 3 4
2 2 2 2 4
"""

[bubble]
challenge = """
:bubbler @ [ 1 2 3 length bubble. ]
@ [ 4 5 6 ] bubbler
"""
result = """
@ 4 5 6
1 2 3
@ 4 5 6
@ 1 2 3 3 bubble .
bubbler
"""

[removal]
challenge = """0 2 3 @ [ 1 1 , ] :hello 5 4 @ [ 1 2 1 , hello ] """
result = """
@ 1 5
hello 5 4
0 2 3 @
"""

[exec]
challenge = """0 1 2 3 @ [ "12" parse 1 ] 7"""
result = """
7
@ c 1
0 1 2 3
"""

[multiplier]
challenge = """8 9 ; ."""
result = """
8 8 8 8 8 8 8 8 8
"""

[enclose1]
challenge = """8 :by3 @ [ 3 ;. ] 4 by3"""
result = """
4 4 4
@ 3 ; .
8 by3
"""

[internalcall]
challenge = """
:base @ [ 1 2 3 ] 
:sub1 @ [ base 5 ] 
6 sub1
"""
result = """
6 1 2 3 5
@ 1 2 3 5
sub1
@ 1 2 3
base
"""

[externalcall]
challenge = """
:sub1 @ [ .. 1 ]
5 @ [ "hello\n" print. ] sub1
"""
result = """
hello

5 1
@ . 1
sub1
"""

[mathfunc]
challenge = """
:p @ [ 2 3 +. ]
:d @ [ @ ]
:r @ [ @ ]
:e @ .p growexec
.r .d .e run 3 ,
"""
result = """
@
├@ 2
├@ 2 3
├@ 2 3 +
╰@ 2 3 + .
e
@
╰@
 ├@
  ╰@ 2 3 +
 ╰@
  ╰@ 5
r
@
╰@ 5
d
@ 2 3 + .
p
"""

[mathundofunc]
challenge = """
:p @ [ 2 3 +. ]
:d @ [ @ ]
:r @ [ @ ]
:e @ .p growexec
.r .d .e run

.r undo 1 ,

7 ,
"""
result = """
@
╰@ 2 3 +
d
@ 2 3 + .
p
"""

[mathundofunc2]
challenge = """
:p @ [ 2 3 +. 4 5 *. ]
:d @ [ @ ]
:r @ [ @ ]
:e @ .p growexec
.r .d .e run

.r undo .d [ 1 , ]
.r undo
.r .d .e run
7 , 
"""
result = """
@
╰@ 2 3 +
d
@ 2 3 + .
p
"""

[mathundofunc3]
challenge = """
:p @ [ 2 3 +. 4 *. ]
:d @ [ @ ]
:r @ [ @ ]
:e @ .p growexec
.r .d .e run

.r undo 1 , 

7 ,
"""
result = """
@
╰@ 2 3 +
d
@ 2 3 + .
p
"""

[shapecompare1]
challenge = """
1 2 #
@ @ #
@ [ 1 ] @ [ 2 ] #
@ [ @ ] @ [ 2 ] #
@ [ @ [ 1 @ 3 ] ] @ [ @ [ 2 @ 4 ] ] #
@ [ @ [ 1 @ 3 ] ] @ [ @ [ 2 4 @ ] ] #
@ [ @ [ 1 @ 3 ] ] @ [ @ [ 2 4 2 ] ] #
"""
result = """
0
@
╰@ 2 4 2
@
╰@ 1 @ 3
0
@
╰@ 2 4 @
@
╰@ 1 @ 3
1
@
╰@ 2 @ 4
@
╰@ 1 @ 3
0
@ 2
@ @
1
@ 2
@ 1
1 2 1 @ @ 1
"""

[hasfunc]
challenge = """
@ [ 5 :a 2 ] :b has
@ [ 4 :c 3 ] :c has
"""
result = """
1
@ 4 c 3
0
@ 5 a 2
"""

[zipfunc]
challenge = "@ [ 1 3 5 ] @ [ 2 4 6 ] zip"
result = "@ 1 2 3 4 5 6"

[unevenzip]
challenge = "@ [ 1 3 5 7 ] @ [ 2 4 6 ] zip"
result = "@ 1 2 3 4 5 6"

[unevenzip1]
challenge = "@ [ 1 3 5 7 ] @ [ 2 4 6 8 10 ] zip"
result = "@ 1 2 3 4 5 6 7 8"

[mapfunc]
challenge = "@ [ 4 5 6 ] @ [ 1 +. ] map "
result = """
@ 5 6 7
@ 4 5 6
"""

[mapfunc1]
challenge = "@ [ :a :b :c ] @ [ 2 ;. print. ] map "
result = """
abc
@ a b c
@ a b c
"""

[inttype]
challenge = "1 int 0 int @ int @ int"
result = "1 1 0 1 @ 0 @ 0"

[reduce]
challenge = "@ [ 1 2 3 ] @ [ +. ] reduce"
result = "@ 6"

[intreduce]
challenge = """
:allints @ [ .int map. .and reduce. .. ]
@ [ 1 2 3 :a ] allints
@ [ 1 2 3 1 ] allints
"""
result = """
1
@ 1 2 3 1
0
@ 1 2 3 a
@ int map . and reduce . .
allints
"""

# [intreducearray]
# challenge = """
# :allints @ [
#     (assumes an argument called arr)
#     @. [. :arr :..
#         (gets the length of arr and
#         subtracts 3 to check equality
#         because I didn't bother to
#         add comparisons yet)
#         [. length.. ]. ->.. 3 -.. not..
#     ].
#     ->..
#     (converting the comparison to bool)
# ]
# :arr @ [ 1 2 3 ] allints.
# :arr @ [ 1 2 3 :a ] allints.
# :arr @ [ 1 2 3 4 5 6 ] allints.
# """
# result = """
# 0
# @ 1 2 3 4 5 6
# 0 arr
# @ 1 2 3 a
# 0 arr
# @ 1 2 3
# arr
# @ arr : . [ . length . ] . -> . 3 - . arr : . [ . 1 , . ] . 2 , . not .
# allints
# """

[duplicator]
challenge = """
1 2 @ <~ ->
"""
result = """
2
@ 1 2
1 2"""

[tailrecursive]
challenge = """
:sub1 @ [ .. 1 -. ] 
5 5 .sub1 .sub1 sub1
"""
result = """
5 2
@ . 1 - .
sub1
"""

[choice]
challenge = "1 2 3 ?"
result = "1 3"

[choice1]
challenge = "0 2 3 ?"
result = "0 2"

[while]
challenge = """
:five @ [ @ [ 5 ] ]

:]> @ [ ]. ->. ]

@ [ .five [. [. 1 -. ]>. ]>. ] 0 while
"""
result = """
0 0 0 0 0
@
├.
├@ ] . -> .
├.
├@ ] . -> .
├[ . [ . 1 - .
╰@
 ╰@ 0
@ ] . -> .
]>
@
╰@ 0
five
"""

[factorial]
challenge = """
:fact @ [ @ ]

.fact [ [
    2 ;.
    1 -.
    @ [ 1 +. ]
    @ [ :fact. ]
    .? .. 4 ;
    *.
    :"  @ [ "!" ] 2 ,.
] ] 1 ,

5 fact .
4 fact .
3 fact .
"""
result = """
78 18 6
@
╰!
fact
"""

[runfunc1]
challenge = """
:d @ [ @ ]
:p @ [ 1 2 3 +. ]
:e @ .p growexec 
0 .d .e run 2 ,
0 .d .e run 8 ,
"""
result = """
@
╰@ 1 5 1 5
d
"""

[runfunc2]
challenge = """
:d @ [ @ ]
:p @ [ @ [ 1 2 3 +. ] .. ]
:e @ .p growexec
0 .d .e run 2 ,
0 .d .e run 2 ,
0 .d .e run 4 ,
.p <~ [ [ +. ] ] 1 ,
:e @ .p growexec
0 .d .e run 10 ,
"""
result = """
@
╰@ 1 5 1 5 1 5 6
d
"""

[runfunc3]
challenge = """
:d @ [ @ ]
:p @ [ @ [ 1 2 "hello" print. 3 +. ] .. ]
:e @ .p growexec
0 .d .e run
"hi" print
@ [ .. 1 2 3 4 5 6 7 8 9 0 ] 10 ; .
100 ,
6 ,
"""
result = """
hellohi
@
╰@ 1 5
d
"""

[runfunc4]
challenge = """
:d @ [ @ ]
:p @ [ 1 2 "helloey" print. 3 +. ]
:e @ .p growexec
0 .d .e run
"hi" print
@ [ .. 1 2 3 4 5 6 7 8 9 0 ] 10 ; .
100 ,
6 ,
"""
result = """
helloeyhi
@
╰@ 1 5
d
"""


[detachfunc1]
challenge = """
:d @ [ @ ]
:p @ [ @ [ 1 2 "hello" print. 3 +. ] .. ]
:e @ .p growexec
0 .d .e detach
"hi" print
@ [ .. 1 2 3 4 5 6 7 8 9 0 ] 10 ; .
100 ,
6 ,
"""
result = """
hihello
@
╰@ 1 5
d
"""

[factorialrun]
challenge = """
:++ @ [ 1 +. :" @ [ :++ ] 2 ,. ]
:fact @ [ @ ]

.fact [ [
    2 ;.
    1 -.

    .++
    @ [ :fact :. ]
    ?. 5 ;
    *.
] ] 1 , .

:d @ [ @ ]
:p @ [ 5 fact. ]
:e @ .p growexec
0 .d .e run 7 ,

"""
result = """
@
╰@ 78
d
@
├? . . . . . * .
├@ fact : .
├++
╰2 ; . 1 - .
fact
++
++
"""

[reverseadd]
challenge = """
:p @ [ 1 2 +. ]
:d @ [ @ ]
:e @ .p growexec
:r @ .d .e run
"""
result = """
@
@
╰@ 3
r @
@
├@ 1
├@ 1 2
├@ 1 2 +
╰@ 1 2 + .
e
@
╰@ 3
d
@ 1 2 + .
p
"""

[atomcreator]
challenge = """
:new@ @ [ @. [. 1 2 3 ]. ]
@ [ new@ ]
@ [ new@ ]
[ [ + new@ ] ] 
"""
result = """
@
╰@
 ├@ 1 2 3
 ╰1 5
@
╰@ 1 2 3
@ @ . [ . 1 2 3 ] .
new@
"""

[atomopener]
challenge = """
:open@ @ [ @. [. ]
:close@ @ [ ]. ]
open@ 1 2 3 close@
open@ 1 2 5 close@
"""
result = """
@ 1 2 5
@ 1 2 3
@ ] .
close@
@ @ . [ .
open@
"""

[curlybrackets1]
challenge = """
:{ @ [ ::: @. [. :" @ [ :{ ] 2 ,. ]
:} @ [ ]. 2 ., ... :" @ [ :} ] 2 ,. ]
:container @ [ { :six 6 } 2 3 :" @ [ "container" ] 2 ,. ]
.container ::six .
container
"""
result = """
6 2 3
container
container
}
}
{
{
"""

[curlybrackets2]
challenge = """
:{ @ [ ::: @. [. :" @ [ :{ ] 2 ,. ]
:} @ [ ]. 2 ., ... :" @ [ :} ] 2 ,. ]
:container @ [
    { :six 6 }
    2 3
    { :seven 7 }
    :" @ [ "container" ] 2 ,.
    { :eight 8
        { :nine 9 }
        { 1 :twelve 12 3
            { :thirteen 13 }
            :ten 10 
            { :eleven 11 }
        } 
    }
    5
]
.container ::six .
.container ::seven .
.container ::eight .
.container ::nine .
.container ::ten .
.container ::eleven .
.container ::twelve .
.container ::thirteen .
container
"""
result = """
6 7 8 9 a b c d 2 3 5
container
container
}
}
{
{
"""

[curlyauxfunctions]
challenge = """
:{ @ [ ::: @. [. :" @ [ :{ ] 2 ,. ]
:} @ [ ]. 2 ., ... :" @ [ :} ] 2 ,. ]
:vehicle @ [
    :base @. [.
        :wheels :wheels. 1 +.
    ].
]
:car @ [
    { :wheels 4 }
    vehicle
]

.car ::base ::wheels .
.car ::wheels .
"""
result = """
5 4
@
├@ wheels 5
├2 wheels . base
├@ wheels 4
╰::
car
@ base @ . [ . wheels wheels . 1 + . ] .
vehicle
}
}
{
{
"""

[curlyauxfunctions2]
challenge = """
:{ @ [ ::: @. [. :" @ [ :{ ] 2 ,. ]
:} @ [ ]. 2 ., ... :" @ [ :} ] 2 ,. ]
:vehicle @ [
    @ [ bubble. int. ] ...
    :base @. [.
        :wheels :wheels. 1 +.
    ]. 2 ., ...
]
:car @ [
    { :wheels 4 }
    0 vehicle
]

.car ::base ::wheels .
.car ::wheels .
1 2 3 4 9 car
@ [ 5 ]
1 2 "str" car
"""
result = """
1 2 str str 0
@ 5
5 4 1 2 3 4 9 9 1
@
├2 wheels .
├@ wheels 5
├. base
├@ bubble . int .
├2 wheels . 0
├@ wheels 4
╰::
car
@
├.1 base @ . [ . wheels wheels . 1 + . ] . 2 , .1
╰@ bubble . int .
vehicle
}
}
{
{
"""

[debugger]
challenge = """
debug
"""
result = "None"

[factorialdetach]
challenge = """
:++ @ [ 1 +. :" @ [ :++ ] 2 ,. ]
:fact @ [ @ ]

.fact [ [
    debug.
    2 ;.
    1 -.

    .++
    @ [ debug :fact :. .. .. ]
    ?. ..
    *.
] ] 1 , .

:d @ [ @ ]
:p @ [ 5 fact. ]
:e @ .p growexec
0 .d .e detach
@ [ .. 0 1 2 3 4 5 6 7 8 9 ] 100 ; .
1000 ,
"""

[window]
challenge = """
800 400 window
@ [ shouldclosewin. not. ]
@ [ drawbegin[.
    clearbg.
    "testerino" writetext.
    ]drawend.
]
while
"""
result = """
@ drawbegin[ . clearbg . testerino writetext . ]drawend .
@ shouldclosewin . not .
"""